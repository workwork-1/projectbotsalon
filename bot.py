"""
Telegram –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥ –≤ —Å–∞–ª–æ–Ω–µ –∫—Ä–∞—Å–æ—Ç—ã —Å SQLite.
"""

import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from booking_system import BookingSystem
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os
from typing import List, Dict, Any, Optional

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
BOT_TOKEN = os.getenv("BOT_TOKEN") 

if not BOT_TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
    logger.error("1. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª .env –≤ –ø–∞–ø–∫–µ —Å –±–æ—Ç–æ–º")
    logger.error("2. –ó–∞–¥–∞–Ω –ª–∏ –≤ –Ω–µ–º BOT_TOKEN")
    logger.error(f"–¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Å–∏—Å—Ç–µ–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
booking = BookingSystem()

class BookingStates(StatesGroup):
    GET_NAME = State()
    GET_PHONE = State()
    CHOOSE_SERVICE = State()
    CHOOSE_MASTER = State()
    CHOOSE_DATE = State()
    CHOOSE_TIME = State()
    CONFIRM = State()

def create_service_keyboard(services: List[Dict[str, Any]]) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"{s['name']} ({s['duration']} –º–∏–Ω)")] 
            for s in services
        ],
        resize_keyboard=True
    )

def create_master_keyboard(masters: List[Dict[str, Any]]) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=m['name'])] for m in masters],
        resize_keyboard=True
    )

def create_date_keyboard() -> ReplyKeyboardMarkup:
    today = datetime.now().date()
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=(today + timedelta(days=i)).strftime("%Y-%m-%d"))] 
            for i in range(14) if (today + timedelta(days=i)).weekday() < 5
        ],
        resize_keyboard=True
    )

def create_time_keyboard(slots: List[Dict[str, Any]]) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=s['start_time'])] for s in slots],
        resize_keyboard=True
    )

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üìù /book - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É\n"
        "üìã /my_bookings - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏\n"
        "‚ùå /cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"
    )

@dp.message(Command("book"))
async def cmd_book(message: types.Message, state: FSMContext):
    await state.set_state(BookingStates.GET_NAME)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@dp.message(BookingStates.GET_NAME)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(BookingStates.GET_PHONE)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@dp.message(BookingStates.GET_PHONE)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not phone.isdigit() or len(phone) < 10:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        return
    
    await state.update_data(phone=phone)
    await state.set_state(BookingStates.CHOOSE_SERVICE)
    
    services = booking.get_all_services()
    keyboard = create_service_keyboard(services)
    await message.answer("üíÖ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=keyboard)

@dp.message(BookingStates.CHOOSE_SERVICE)
async def process_service(message: types.Message, state: FSMContext):
    services = booking.get_all_services()
    selected_service = next((s for s in services if s['name'] in message.text), None)
    
    if not selected_service:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    
    await state.update_data(
        service_id=selected_service['id'],
        service_name=selected_service['name'],
        duration=selected_service['duration']
    )
    await state.set_state(BookingStates.CHOOSE_MASTER)
    
    masters = booking.get_masters_for_service(selected_service['id'])
    keyboard = create_master_keyboard(masters)
    await message.answer("üíá –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=keyboard)

@dp.message(BookingStates.CHOOSE_MASTER)
async def process_master(message: types.Message, state: FSMContext):
    masters = booking.get_all_masters()
    selected_master = next((m for m in masters if m['name'] == message.text), None)
    
    if not selected_master:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    
    await state.update_data(
        master_id=selected_master['id'],
        master_name=selected_master['name']
    )
    await state.set_state(BookingStates.CHOOSE_DATE)
    
    keyboard = create_date_keyboard()
    await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard)

@dp.message(BookingStates.CHOOSE_DATE)
async def process_date(message: types.Message, state: FSMContext):
    try:
        selected_date = datetime.strptime(message.text, "%Y-%m-%d").date()
        if selected_date < datetime.now().date():
            raise ValueError("–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º")
    except ValueError as e:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        return
    
    data = await state.get_data()
    slots = booking.get_available_slots(data['master_id'], message.text, data['duration'])
    
    if not slots:
        await message.answer("‚ùå –ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:")
        return
    
    await state.update_data(date=message.text)
    await state.set_state(BookingStates.CHOOSE_TIME)
    
    keyboard = create_time_keyboard(slots)
    await message.answer("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)

@dp.message(BookingStates.CHOOSE_TIME)
async def process_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text)
    data = await state.get_data()
    
    confirm_text = (
        "üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n\n"
        f"üß¥ –£—Å–ª—É–≥–∞: {data['service_name']}\n"
        f"üíá –ú–∞—Å—Ç–µ—Ä: {data['master_name']}\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {data['time']}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    
    await state.set_state(BookingStates.CONFIRM)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
        ],
        resize_keyboard=True
    )
    await message.answer(confirm_text, reply_markup=keyboard)

@dp.message(BookingStates.CONFIRM)
async def process_confirmation(message: types.Message, state: FSMContext):
    if message.text.lower() not in ['–¥–∞', '‚úÖ –¥–∞']:
        await message.answer("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return
    
    data = await state.get_data()
    try:
        client_id = booking.add_client(
            name=data['name'],
            phone=data['phone'],
            telegram_id=message.from_user.id
        )
        if client_id is None:
            logger.error(f"Failed to create client for user {message.from_user.id}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
                               reply_markup=types.ReplyKeyboardRemove())
            await state.clear()
            return

    except Exception as e:
        logger.error(f"Error adding client: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
                           reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return
    
    success = booking.create_booking(
        client_id=client_id,
        service_id=data['service_id'],
        master_id=data['master_id'],
        date_str=data['date'],
        start_time=data['time']
    )
    
    if success:
        await message.answer(
            "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏: /my_bookings\n"
            "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å: /cancel",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=types.ReplyKeyboardRemove()
        )
    
    await state.clear()

@dp.message(Command("my_bookings"))
async def cmd_my_bookings(message: types.Message):
    client_id = booking.get_client_id(telegram_id=message.from_user.id)
    if not client_id:
        await message.answer("üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return
    
    bookings = booking.get_client_bookings(client_id)
    if not bookings:
        await message.answer("üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return
    
    response = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n" + "\n\n".join(
        f"üìÖ {b['date']} –≤ {b['start_time']}\n"
        f"üß¥ –£—Å–ª—É–≥–∞: {b['service']}\n"
        f"üíá –ú–∞—Å—Ç–µ—Ä: {b['master']}"
        for b in bookings
    )
    await message.answer(response)

@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message):
    client_id = booking.get_client_id(telegram_id=message.from_user.id)
    if not client_id:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    bookings = booking.get_client_bookings(client_id)
    if not bookings:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"‚ùå {b['date']} {b['start_time']} - {b['service']}",
                    callback_data=f"cancel_{b['id']}"
                )
            ] for b in bookings
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith('cancel_'))
async def process_cancel(callback: types.CallbackQuery):
    booking_id = int(callback.data.split('_')[1])
    if booking.cancel_booking(booking_id):
        await callback.message.edit_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

async def main():
    logger.info("Starting bot...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())  # ‚Üê –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É (–ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Ñ–∞–π–ª–∞)